
(1°)  E se cada cada quadrado estivesse dentro de um array, onde por padrão possuem estado desativado e ao clicar 
  tornam - se ativados podendo reproduzir o som ? Dessa forma, conseguiriamos colocar um tempo para passar em
  cada index. Se Eu tenho um som na primeira posição e outro na quinta, ambos ativados, com tempo de percurso 
  de 1 segundo por index, o tempo para ir do primeiro ao segundo seria de 5 segundos.

  Cada quadrado possue uma posição fixa no vetor, já predefindo.

  = [

  [1° som (desativado)] ---> [2° som (desativado)] ---> [3° som (desativado)] ---> [4° som (desativado)] ---> [...] ---> ...

  ]
  
  [som ativo (tocar)] ---> [som desativado] ---> [som ativo (tocar)] ---> [som desativado] ---> [...] ---> ...

  o que eu quero dizer ?

  array = [
  [1,2,3]
  [4,5,6]
  [7,8,9]
  [10,11,12]
  [13,14,15]
  ]

  O espaço array[3][1] = 8, possue seu espaço fixo e ninguém pode invadir ele. Não será uma fila ou pilha.
  O som 10 é fixo no lugar que ele está. Por exemplo. Suponha que eu adicione os sons 1, 5, 9; caso eu adicione
  o 8, a sequência deve ficar 1, 5, 8, 9.

  E se eu tivesse uma matriz onde eu verifico sempre a coluna? Verifico se na primeira coluna existe som em suas linhas
  e vou fazendo isso para todas as outras colunas.

  criar um array para colocar os elementos que estao ativos na matriz. Porem, a matriz tera uma ierarquia, indo de 1 ate n
  [1,2,3,4,5,6]
  ...
  [31,32,33,34,35,36]

  Esse array eh um 6x6, logo meu vetor tera tamanho 36. Se eu pegar o elemento 5 na matriz ele devera ocupar a posicao no
  array.

  [_,_,_,_,5,_,_,...,_] onde _ significa vazio.

  Elementos da mesma coluna devem tocar ao mesmo tempo se estiverem ativos.

  Iterar pelos elementos de cada coluna
  Filtrar os elementos que são da mesma coluna.

   if(itemDoArraySelecionado.ativo){
       itemDoArraySelecionado.div = elemento;
       }else{
       itemDoArraySelecionado.div = null;
       }



       inversao da Matriz ---->
for(var j = 0; j < matrizSons[0].length; j++){
  var coluna = [];
  for(var i = 0; i < matrizSons.length; i++){
    coluna.push(matrizSons[i][j]);
  }
  arrayInvertido.push(coluna);
}
<----

for(var coluna = 0; coluna < arraysPorColuna.length; coluna++){
  var arrayDaColuna = arraysPorColuna[coluna];
  console.log(`Coluna ${coluna}: `);

  for(var linha = 0; linha < arraysPorColuna.length; linha++){
    var elemento = arrayDaColuna[linha];
    console.log(`Elemento na linha ${linha}:`, elemento);
  }
}




------------------


function reproduzirSonsDaLinha(linha){
  var sonsAtivosDaLinha = [];
  for(var coluna = 0; coluna < 6;coluna++){
    if(arraysPorColuna[linha][coluna].ativo){
      sonsAtivosDaLinha.push(arraysPorColuna[linha][coluna].div)
    }
  }
  
  sonsAtivosDaLinha.forEach(function(elemento){
    if(elemento){
      var soundKey = elemento.dataset.sound;
      var som = audio[1][soundKey];
      var quadrado = new Audio(som);

      quadrado.currentTime = 0;
      quadrado.play();
    }
  });

}

var linhaAtual = 0;
var intervaloEntreLinhas = 1000;

function reproduzirLinhasSequencialmente(){
  if(linhaAtual >= matrizSons[0].length){
    return;
  }

  reproduzirSonsDaLinha(linhaAtual);

  linhaAtual++;

  setTimeout(reproduzirLinhasSequencialmente,intervaloEntreLinhas);
}

var botaoPlay = document.getElementById("play");
botaoPlay.addEventListener("click", function(){
  linhaAtual = 0;
  reproduzirLinhasSequencialmente();
});

------------------
